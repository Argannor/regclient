name: Docker

on:
  push:
    branches:
      - 'main'
      - 'feature/**'
    tags:
      - 'v*.*.*'
  schedule:
    - cron: '0 06 * * *'

jobs:

  docker:
    name: Docker
    runs-on: ubuntu-latest
    steps:
    - name: Prepare
      id: prep
      run: |
        REGCTL_HUB_IMAGE=regclient/regctl
        REGSYNC_HUB_IMAGE=regclient/regsync
        REGBOT_HUB_IMAGE=regclient/regbot
        REGCTL_GHCR_IMAGE=ghcr.io/regclient/regctl
        REGSYNC_GHCR_IMAGE=ghcr.io/regclient/regsync
        REGBOT_GHCR_IMAGE=ghcr.io/regclient/regbot
        VERSION=noop
        if [ "${{ github.event_name }}" = "schedule" ]; then
          VERSION=edge
        elif [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION="${GITHUB_REF#refs/tags/}"
        elif [[ $GITHUB_REF == refs/heads/* ]]; then
          VERSION="${GITHUB_REF#refs/heads/}"
          if [ "${{ github.event.repository.default_branch }}" = "$VERSION" ]; then
            VERSION=edge
          fi
        elif [[ $GITHUB_REF == refs/pull/* ]]; then
          VERSION="pr-${{ github.event.number }}"
        fi
        VERSION="$(echo "${VERSION}" | sed -r 's#/+#-#g')"
        REGCTL_TAGS_SCRATCH="${REGCTL_HUB_IMAGE}:${VERSION},${REGCTL_GHCR_IMAGE}:${VERSION}"
        REGCTL_TAGS_ALPINE="${REGCTL_HUB_IMAGE}:${VERSION}-alpine,${REGCTL_GHCR_IMAGE}:${VERSION}-alpine"
        REGSYNC_TAGS_SCRATCH="${REGSYNC_HUB_IMAGE}:${VERSION},${REGSYNC_GHCR_IMAGE}:${VERSION}"
        REGSYNC_TAGS_ALPINE="${REGSYNC_HUB_IMAGE}:${VERSION}-alpine,${REGSYNC_GHCR_IMAGE}:${VERSION}-alpine"
        REGBOT_TAGS_SCRATCH="${REGBOT_HUB_IMAGE}:${VERSION},${REGBOT_GHCR_IMAGE}:${VERSION}"
        REGBOT_TAGS_ALPINE="${REGBOT_HUB_IMAGE}:${VERSION}-alpine,${REGBOT_GHCR_IMAGE}:${VERSION}-alpine"
        if [[ $VERSION =~ ^v[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
          MINOR="${VERSION%.*}"
          MAJOR="${MINOR%.*}"
          REGCTL_TAGS_SCRATCH="${REGCTL_TAGS_SCRATCH},${REGCTL_HUB_IMAGE}:${MINOR},${REGCTL_HUB_IMAGE}:${MAJOR},${REGCTL_HUB_IMAGE}:latest"
          REGCTL_TAGS_SCRATCH="${REGCTL_TAGS_SCRATCH},${REGCTL_GHCR_IMAGE}:${MINOR},${REGCTL_GHCR_IMAGE}:${MAJOR},${REGCTL_GHCR_IMAGE}:latest"
          REGCTL_TAGS_ALPINE="${REGCTL_TAGS_ALPINE},${REGCTL_HUB_IMAGE}:${MINOR}-alpine,${REGCTL_HUB_IMAGE}:${MAJOR}-alpine,${REGCTL_HUB_IMAGE}:alpine"
          REGCTL_TAGS_ALPINE="${REGCTL_TAGS_ALPINE},${REGCTL_GHCR_IMAGE}:${MINOR}-alpine,${REGCTL_GHCR_IMAGE}:${MAJOR}-alpine,${REGCTL_GHCR_IMAGE}:alpine"
          REGSYNC_TAGS_SCRATCH="${REGSYNC_TAGS_SCRATCH},${REGSYNC_HUB_IMAGE}:${MINOR},${REGSYNC_HUB_IMAGE}:${MAJOR},${REGSYNC_HUB_IMAGE}:latest"
          REGSYNC_TAGS_SCRATCH="${REGSYNC_TAGS_SCRATCH},${REGSYNC_GHCR_IMAGE}:${MINOR},${REGSYNC_GHCR_IMAGE}:${MAJOR},${REGSYNC_GHCR_IMAGE}:latest"
          REGSYNC_TAGS_ALPINE="${REGSYNC_TAGS_ALPINE},${REGSYNC_HUB_IMAGE}:${MINOR}-alpine,${REGSYNC_HUB_IMAGE}:${MAJOR}-alpine,${REGSYNC_HUB_IMAGE}:alpine"
          REGSYNC_TAGS_ALPINE="${REGSYNC_TAGS_ALPINE},${REGSYNC_GHCR_IMAGE}:${MINOR}-alpine,${REGSYNC_GHCR_IMAGE}:${MAJOR}-alpine,${REGSYNC_GHCR_IMAGE}:alpine"
          REGBOT_TAGS_SCRATCH="${REGBOT_TAGS_SCRATCH},${REGBOT_HUB_IMAGE}:${MINOR},${REGBOT_HUB_IMAGE}:${MAJOR},${REGBOT_HUB_IMAGE}:latest"
          REGBOT_TAGS_SCRATCH="${REGBOT_TAGS_SCRATCH},${REGBOT_GHCR_IMAGE}:${MINOR},${REGBOT_GHCR_IMAGE}:${MAJOR},${REGBOT_GHCR_IMAGE}:latest"
          REGBOT_TAGS_ALPINE="${REGBOT_TAGS_ALPINE},${REGBOT_HUB_IMAGE}:${MINOR}-alpine,${REGBOT_HUB_IMAGE}:${MAJOR}-alpine,${REGBOT_HUB_IMAGE}:alpine"
          REGBOT_TAGS_ALPINE="${REGBOT_TAGS_ALPINE},${REGBOT_GHCR_IMAGE}:${MINOR}-alpine,${REGBOT_GHCR_IMAGE}:${MAJOR}-alpine,${REGBOT_GHCR_IMAGE}:alpine"
        fi
        echo "::set-output name=version::${VERSION}"
        echo "::set-output name=regctl_cache_scratch::${REGCTL_GHCR_IMAGE}:buildcache-scratch"
        echo "::set-output name=regctl_cache_alpine::${REGCTL_GHCR_IMAGE}:buildcache-alpine"
        echo "::set-output name=regsync_cache_scratch::${REGSYNC_GHCR_IMAGE}:buildcache-scratch"
        echo "::set-output name=regsync_cache_alpine::${REGSYNC_GHCR_IMAGE}:buildcache-alpine"
        echo "::set-output name=regbot_cache_scratch::${REGBOT_GHCR_IMAGE}:buildcache-scratch"
        echo "::set-output name=regbot_cache_alpine::${REGBOT_GHCR_IMAGE}:buildcache-alpine"
        echo "::set-output name=regctl_tags_scratch::${REGCTL_TAGS_SCRATCH}"
        echo "::set-output name=regctl_tags_alpine::${REGCTL_TAGS_ALPINE}"
        echo "::set-output name=regsync_tags_scratch::${REGSYNC_TAGS_SCRATCH}"
        echo "::set-output name=regsync_tags_alpine::${REGSYNC_TAGS_ALPINE}"
        echo "::set-output name=regbot_tags_scratch::${REGBOT_TAGS_SCRATCH}"
        echo "::set-output name=regbot_tags_alpine::${REGBOT_TAGS_ALPINE}"
        echo "::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')"

    - name: Check out code
      uses: actions/checkout@v2

    - name: Set embed/version.json
      run: make embed/version.json

    # - name: Set up QEMU
    #   uses: docker/setup-qemu-action@v1

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
     
    - name: Login to DockerHub
      if: github.repository_owner == 'regclient'
      uses: docker/login-action@v1 
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Login to GHCR
      if: github.repository_owner == 'regclient'
      uses: docker/login-action@v1 
      with:
        registry: ghcr.io
        username: ${{ secrets.GHCR_USERNAME }}
        password: ${{ secrets.GHCR_TOKEN }}

    - name: Build and push regctl scratch
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./build/Dockerfile.regctl.buildkit
        platforms: linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64,linux/ppc64le,linux/s390x
        push: ${{ github.event_name != 'pull_request' && github.repository_owner == 'regclient' }}
        target: release-scratch
        tags: ${{ steps.prep.outputs.regctl_tags_scratch }}
        cache-from: type=registry,ref=${{ steps.prep.outputs.regctl_cache_scratch }}
        cache-to: ${{ github.repository_owner == 'regclient' && format('type=registry,ref={0},mode=max', steps.prep.outputs.regctl_cache_scratch) || 'type=inline'}}
        build-args: |
          VCS_REF=${{ github.sha }}
        labels: |
          org.opencontainers.image.created=${{ steps.prep.outputs.created }}
          org.opencontainers.image.source=${{ github.repositoryUrl }}
          org.opencontainers.image.version=${{ steps.prep.outputs.version }}
          org.opencontainers.image.revision=${{ github.sha }}

    - name: Build and push regctl alpine
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./build/Dockerfile.regctl.buildkit
        platforms: linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64,linux/ppc64le,linux/s390x
        push: ${{ github.event_name != 'pull_request' && github.repository_owner == 'regclient' }}
        target: release-alpine
        tags: ${{ steps.prep.outputs.regctl_tags_alpine }}
        cache-from: type=registry,ref=${{ steps.prep.outputs.regctl_cache_alpine }}
        cache-to: ${{ github.repository_owner == 'regclient' && format('type=registry,ref={0},mode=max', steps.prep.outputs.regctl_cache_alpine) || 'type=inline'}}
        build-args: |
          VCS_REF=${{ github.sha }}
        labels: |
          org.opencontainers.image.created=${{ steps.prep.outputs.created }}
          org.opencontainers.image.source=${{ github.repositoryUrl }}
          org.opencontainers.image.version=${{ steps.prep.outputs.version }}
          org.opencontainers.image.revision=${{ github.sha }}

    - name: Build and push regsync scratch
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./build/Dockerfile.regsync.buildkit
        platforms: linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64,linux/ppc64le,linux/s390x
        push: ${{ github.event_name != 'pull_request' && github.repository_owner == 'regclient' }}
        target: release-scratch
        tags: ${{ steps.prep.outputs.regsync_tags_scratch }}
        cache-from: type=registry,ref=${{ steps.prep.outputs.regsync_cache_scratch }}
        cache-to: ${{ github.repository_owner == 'regclient' && format('type=registry,ref={0},mode=max', steps.prep.outputs.regsync_cache_scratch) || 'type=inline'}}
        build-args: |
          VCS_REF=${{ github.sha }}
        labels: |
          org.opencontainers.image.created=${{ steps.prep.outputs.created }}
          org.opencontainers.image.source=${{ github.repositoryUrl }}
          org.opencontainers.image.version=${{ steps.prep.outputs.version }}
          org.opencontainers.image.revision=${{ github.sha }}

    - name: Build and push regsync alpine
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./build/Dockerfile.regsync.buildkit
        platforms: linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64,linux/ppc64le,linux/s390x
        push: ${{ github.event_name != 'pull_request' && github.repository_owner == 'regclient' }}
        target: release-alpine
        tags: ${{ steps.prep.outputs.regsync_tags_alpine }}
        cache-from: type=registry,ref=${{ steps.prep.outputs.regsync_cache_alpine }}
        cache-to: ${{ github.repository_owner == 'regclient' && format('type=registry,ref={0},mode=max', steps.prep.outputs.regsync_cache_alpine) || 'type=inline'}}
        build-args: |
          VCS_REF=${{ github.sha }}
        labels: |
          org.opencontainers.image.created=${{ steps.prep.outputs.created }}
          org.opencontainers.image.source=${{ github.repositoryUrl }}
          org.opencontainers.image.version=${{ steps.prep.outputs.version }}
          org.opencontainers.image.revision=${{ github.sha }}

    - name: Build and push regbot scratch
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./build/Dockerfile.regbot.buildkit
        platforms: linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64,linux/ppc64le,linux/s390x
        push: ${{ github.event_name != 'pull_request' && github.repository_owner == 'regclient' }}
        target: release-scratch
        tags: ${{ steps.prep.outputs.regbot_tags_scratch }}
        cache-from: type=registry,ref=${{ steps.prep.outputs.regbot_cache_scratch }}
        cache-to: ${{ github.repository_owner == 'regclient' && format('type=registry,ref={0},mode=max', steps.prep.outputs.regbot_cache_scratch) || 'type=inline'}}
        build-args: |
          VCS_REF=${{ github.sha }}
        labels: |
          org.opencontainers.image.created=${{ steps.prep.outputs.created }}
          org.opencontainers.image.source=${{ github.repositoryUrl }}
          org.opencontainers.image.version=${{ steps.prep.outputs.version }}
          org.opencontainers.image.revision=${{ github.sha }}

    - name: Build and push regbot alpine
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./build/Dockerfile.regbot.buildkit
        platforms: linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64,linux/ppc64le,linux/s390x
        push: ${{ github.event_name != 'pull_request' && github.repository_owner == 'regclient' }}
        target: release-alpine
        tags: ${{ steps.prep.outputs.regbot_tags_alpine }}
        cache-from: type=registry,ref=${{ steps.prep.outputs.regbot_cache_alpine }}
        cache-to: ${{ github.repository_owner == 'regclient' && format('type=registry,ref={0},mode=max', steps.prep.outputs.regbot_cache_alpine) || 'type=inline'}}
        build-args: |
          VCS_REF=${{ github.sha }}
        labels: |
          org.opencontainers.image.created=${{ steps.prep.outputs.created }}
          org.opencontainers.image.source=${{ github.repositoryUrl }}
          org.opencontainers.image.version=${{ steps.prep.outputs.version }}
          org.opencontainers.image.revision=${{ github.sha }}
